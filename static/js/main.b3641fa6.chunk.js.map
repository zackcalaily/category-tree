{"version":3,"sources":["index.js","../node_modules/contentful-ui-extensions-sdk/dist sync"],"names":["Container","Styled","div","_templateObject","ImportButton","button","_templateObject2","CategoryTree","props","_this","Object","C_code_contentful_poc_extensions_category_tree_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","this","C_code_contentful_poc_extensions_category_tree_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","C_code_contentful_poc_extensions_category_tree_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","onImportClick","locale","sdk","field","dialogs","selectSingleEntry","contentTypes","then","selectedEntry","fields","hasOwnProperty","selectedEntryCategoryIds","categories","map","reference","sys","id","setState","selectedIds","categoryTree","createCategoryTree","state","rootCategories","setValue","buildReference","notifier","success","concat","length","error","onChange","currentNode","selectedNodes","node","value","type","linkType","undefined","getValue","entries","_this2","category","label","name","expanded","checked","includes","disabled","isSelectable","children","subcategories","_this3","window","startAutoResizer","createClient","space","ids","environment","accessToken","process","getEntries","content_type","fields.isRootCategory","include","order","items","react__WEBPACK_IMPORTED_MODULE_7___default","a","createElement","onClick","height","width","viewBox","xmlns","d","fill","react_dropdown_tree_select__WEBPACK_IMPORTED_MODULE_6___default","data","mode","keepTreeOnSearch","keepChildrenOnSearch","React","Component","console","clear","init","ReactDOM","render","document","getElementById","webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports"],"mappings":"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","file":"static/js/main.b3641fa6.chunk.js","sourcesContent":["import DropdownTreeSelect from 'react-dropdown-tree-select';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport Styled from 'styled-components';\nimport { init } from 'contentful-ui-extensions-sdk';\nimport { createClient } from 'contentful';\n\nimport 'normalize.css';\nimport 'react-dropdown-tree-select/dist/styles.css';\nimport './index.css';\n\nconst Container = Styled.div`\n    margin-top: 12px;    \n\n    > button {\n        margin-bottom: 12px;\n    }\n`;\n\nconst ImportButton = Styled.button`\n    background: none;\n    border: 0;\n    cursor: pointer;\n    display: flex;\n    align-items: center;\n    padding: 0;\n    margin: 0;\n    color: #3c80cf;\n    text-decoration: underline;\n\n    &:hover,\n    &:focus {\n        color: #2a3039;\n    }\n\n    svg {\n        margin-right: 4px;\n        fill: #3c80cf;\n    }\n\n    &:hover svg {\n        fill: #2a3039;\n    }\n`;\n\nclass CategoryTree extends React.Component {\n    static propTypes = {\n        sdk: PropTypes.object.isRequired\n    };\n    \n    constructor(props) {\n        super(props);\n\n        this.state = {\n            rootCategories: [],\n            categoryTree: [],\n            selectedIds: props.sdk.field.getValue() !== undefined ? props.sdk.field.getValue().map(reference => reference.sys.id) : [],\n        };\n    }\n\n    createCategoryTree(entries) {\n        return entries.map(category => {\n            const node = {\n                label: category.fields.name,\n                value: category.sys.id,\n                expanded: true,\n                checked: this.state.selectedIds.includes(category.sys.id),\n                disabled: !category.fields.isSelectable\n            };\n\n            if (category.fields.hasOwnProperty('subcategories')) {\n                node.children = this.createCategoryTree(category.fields.subcategories);\n            }\n\n            return node;\n        })\n    }\n\n    onImportClick = () => {\n        const locale = this.props.sdk.field.locale;\n\n        this.props.sdk.dialogs.selectSingleEntry({\n            contentTypes: ['procedure'],\n            locale: locale,\n        })\n            .then(selectedEntry => {\n                if (selectedEntry.fields.hasOwnProperty('categories')) {\n                    const selectedEntryCategoryIds = selectedEntry.fields.categories[locale].map(reference => reference.sys.id);\n                    \n                    this.setState({ selectedIds: selectedEntryCategoryIds }, () => { this.setState({ categoryTree: this.createCategoryTree(this.state.rootCategories) })});\n                    this.props.sdk.field.setValue(selectedEntryCategoryIds.map(id => this.buildReference(id)));\n\n                    // Throw a toast\n                    this.props.sdk.notifier.success(`Imported ${selectedEntryCategoryIds.length} categories`);\n                } else {\n                    this.props.sdk.notifier.error(`Entry is not tagged with any categories!`);\n                }\n            });\n    }\n\n    onChange = (currentNode, selectedNodes) => {\n        const selectedIds = selectedNodes.map(node => node.value);\n        \n        // this.setState({ selectedIds: selectedIds });\n        this.props.sdk.field.setValue(selectedIds.map(id => this.buildReference(id)));\n    }\n\n    buildReference = (id) => {\n        return {\n            sys: {\n                type: 'Link',\n                linkType: 'Entry',\n                id: id\n            }\n        };\n    }\n\n    componentDidMount() {\n        this.props.sdk.window.startAutoResizer();\n\n        const client = createClient({\n            space: this.props.sdk.ids.space,\n            environment: this.props.sdk.ids.environment,\n            accessToken: process.env.REACT_APP_CONTENTFUL_ACCESS_TOKEN\n        });\n\n        // Fetch the root categories\n        client.getEntries({\n            content_type: 'category',\n            'fields.isRootCategory': true,\n            include: 3,\n            order: 'fields.name',\n        })\n            .then(entries => this.setState({ rootCategories: entries.items, categoryTree: this.createCategoryTree(entries.items)}));\n    }\n\n    render() {\n        return (\n            <Container>\n                <ImportButton onClick={this.onImportClick}>\n                    <svg height=\"18\" width=\"18\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\n                       <path d=\"M0 0h24v24H0z\" fill=\"none\"></path>\n                       <path d=\"M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76 0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71 0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71 0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76 0 5-2.24 5-5s-2.24-5-5-5z\"></path>\n                   </svg>\n\n                   Import from another entry\n                </ImportButton>\n\n                <DropdownTreeSelect \n                    data={this.state.categoryTree} \n                    mode=\"hierarchical\"\n                    keepTreeOnSearch={true}\n                    keepChildrenOnSearch={false}\n                    onChange={this.onChange}\n                />\n            </Container>\n        )\n    }\n}\n\nconsole.clear();    // TODO: remove when done debugging\n\ninit(sdk => {\n    ReactDOM.render(<CategoryTree sdk={sdk} />, document.getElementById('root'));\n});\n\n// TODO: detach change handler","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 84;"],"sourceRoot":""}